Fil Rouge Gestion Bancaire
==================================================================================================================

1. Créer une classe « Personne » qui devra implémenter
	 Les propriétés publiques :
		 Nom (string)
		 Prenom (string)
		 DateNaiss (DateTime) - date de naissance
2. Créer une classe « Courant » permettant la gestion d’un compte courant qui devra implémenter
	 Les propriétés publiques :
		 Numéro (string)
		 Solde (double) - Lecture seule
		 LigneDeCredit (double) - représentant la limite négative du compte strictement supérieur ou égale à 0
		 Titulaire (Personne)
	 Les méthodes publiques :
		 void Retrait(double Montant)
		 void Depot(double Montant)

==================================================================================================================

1. Créer une classe « Banque » qui gérera les comptes de la banque
	Cette classe devra implémenter :
	 Les propriétés :
		 Nom (string) - Nom de la banque
	 Un indexeur retournant un compte sur base de son numéro.
	 Les méthodes :
		 void Ajouter(Courant compte)
		 void Supprimer(string Numero)

==================================================================================================================

2.	Surcharger l’opérateur « + » de la classe « Courant » afin qu’il retourne la somme, de type double, des soldes.
	Cependant, les soldes négatifs ne doivent pas être pris en compte.

3.	Ajouter une méthode « AvoirDesComptes » à la classe « Banque » recevant en paramètre le titulaire (Personne) 
	qui calculera les avoirs de tous ses comptes en utilisant l’opérateur « + ». 

==================================================================================================================

1. Créer une classe « Epargne » permettant la gestion d’un carnet d’épargne qui devra implémenter
	 Les propriétés publiques :
		 Numéro (string)
		 Solde (double) - Lecture seule
		 DateDernierRetrait (DateTime) - représentant la date du dernier retrait sur le carnet
		 Titulaire (Personne)
	 Les méthodes publiques :
		 void Retrait(double Montant)
		 void Depot(double Montant)

==================================================================================================================

2.	Définir la classe « Compte » reprenant les parties commune aux classes « Courant » et « Epargne » 
	en utilisant les concepts d’héritage, de redéfinition de méthodes et si besoin, 
	de surcharge de méthodes et d’encapsulation.
	
	Attention le niveau d’accessibilité du mutateur de la propriété Solde doit rester « private ».
	
==================================================================================================================

1.	Modifier la classe  « Banque » afin qu'elle ne travaille qu'avec des comptes.
	
==================================================================================================================

1.	Définir la classe « Compte » comme étant abstraite.

2.	Ajouter une méthode abstraite « protected » à la classe « Compte » appelée « CalculInteret » 
	ayant pour prototype « double CalculInteret() »	en sachant que :
	- pour un livret d’épargne le taux est toujours de 4.5% 
	- tandis que pour le compte courant si le solde est positif le taux sera de 3%	sinon de 9.75%.

3.	Ajouter une méthode « public » à la classe « Compte » appelée « AppliquerInteret » qui additionnera 
	le solde avec le retour de la méthode « CalculInteret ».
	
==================================================================================================================

